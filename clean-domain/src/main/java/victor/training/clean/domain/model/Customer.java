package victor.training.clean.domain.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import static lombok.AccessLevel.NONE;
import static victor.training.clean.domain.model.Customer.Status.DRAFT;

//region Reasons to avoid @Data on Domain Model
// Avoid @Data on Domain Model because: see ADR-002
// 1) hashCode uses @Id‚ö†Ô∏è generated by ORM
// 2) toString might trigger lazy-loading of collection‚ö†Ô∏è
// 3) all setters/getters  on all fields= no encapsulation‚ö†Ô∏è ~ typedef struct
//endregion

//@Data // = @Getter @Setter @ToString @EqualsAndHashCode (1)
@Entity // ORM/JPA (2)
// üëë Domain Model Entity, the backbone of your core complexity.
@Getter
@Setter //üôà ?
public class Customer {
  @Id
  @GeneratedValue
  private Long id;
  private String name;
  private String email;

  // ü§î Hmm... 3 fields with the same prefix. What TODO ?
//  private String shippingAddressCity;
//  private String shippingAddressStreet;
//  private String shippingAddressZip;
  // any client doing setShippingAddressCity("Bucharest")
  //      and ..Street("A") and ..Zip("B")
  // will now call customer.setShippingAddress(new ShippingAddress(
  //     "Bucharest", "A", "B"))
  @Embedded // no ALTER TABLE needed
  private ShippingAddress shippingAddress;

  @ManyToOne
  private Country country;

  private LocalDate createdDate;
  private String createdByUsername;

  private boolean goldMember;
  private String goldMemberRemovalReason;

  private String legalEntityCode;
  private boolean discountedVat;

  public Optional<String> getLegalEntityCode() {
    return Optional.ofNullable(legalEntityCode);
  }

  public boolean canReturnOrders() {
    return goldMember || isIndividual();
  }

  private boolean isIndividual() {
    return legalEntityCode == null;
  }

  public enum Status {
    DRAFT, VALIDATED, ACTIVE, DELETED;

    public void shouldBeOneOf(Status... expected) {
      Stream.of(expected)
              .filter(e -> e == this)
              .findAny()
              .orElseThrow(() -> new IllegalStateException("Expected status: " + Arrays.toString(expected)));
    }
  }
  @Setter(NONE)
  private Status status = DRAFT;
  @Setter(NONE)
  private String validatedBy; // ‚ö† Always not-null when status = VALIDATED or later
  // what is wrong with comments like this? ü§î the people don't abide by them or don't care about them, they don't mind them
  public void validate(String currentUser) {
    status.shouldBeOneOf(DRAFT);
    status = Status.VALIDATED;
    validatedBy = Objects.requireNonNull(currentUser);
  }
  public void activate() {
    status.shouldBeOneOf(Status.VALIDATED);
    status = Status.ACTIVE;
  }

  public void delete() {
    status = Status.DELETED;
  }
}
// so the customer can go from draft to validated but not active, but you can also get from draft directly to delete it right and if it's
// activated, it can get deleted once it is deleted. Can you get back to activate it? No OK I noticed it down.
// how about active to delete it no.

//region Code in the project might [not] follow the rule
class SomeCode {
  public void correct(Customer draftCustomer) {
    draftCustomer.validate("currentUser");
//    draftCustomer.setValidatedBy("currentUser"); // from token/session..
  }
  public void incorrect(Customer draftCustomer) {
    draftCustomer.validate("null");
  }
  public void activate(Customer draftCustomer) {
    draftCustomer.activate();
  }
}
//endregion